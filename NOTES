# -*- org -*-
#+STARTUP: hidestars
#+STARTUP: indent

Strive to work with any POSIX shell:

http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html

This means bash, korn shell, and zshell should all work.  Non-POSIX shells like csh and tcsh very likely won't.

Does require Python.

loads and unloads configs

should there be staging of configs for future loading?  might be a premature optimization.

configs can issue albion commands to load other configs, but, should there be a notion of something that is a collection of configs?  maybe that's an environment.  an environment is made up of configurations?  I kind of like that.  Hmm, you can load multiple configs, can you load multiple environments?  I think maybe not.

should there be roles?  (they could be used in an environment to conditionally load certain configs for people with different roles)  they could be added later, I think.

load a config:  source a config file, record what has been sourced
load an env: source an env file, which will likely have load config commands, record env that is loaded.
unload a config: remove config from list of loaded configs, purgeenv and reload env
load an env: replace recorded env with this new one, purgeenv and reload env

Variables:
ALBION_CONFIG_PATH: like PATH, a list of paths to albion config files
ALBION_ENV_PATH: like PATH, a list of paths to albion environment files
ALBION_ENV: currently loaded env
ALBION_CONFIGS: list of currently loaded configs

will we replace .profile and shell rc files, or source something at the top of them that loads albion stuff?

---

How environments set up when a user logs in:

http://www.linuxfromscratch.org/blfs/view/cvs/postlfs/profile.html

For interactive shells, /bin/login sets up the following:

$HOME, $SHELL, $PATH, $LOGNAME, and $MAIL, plus could set up $TERM

/bin/login also parses /etc/login.defs, which may cause it to set $PATH, based on ENV_PATH or ENV_SUPATH (for superuser) in login.defs.

These will need to be preserved when we purge by putting them in the keepers list, except PATH, because that's one that will likely be modified by configurations, and be reset when the shell starts.

Then the shell will source various files based on how it is invoked.  We should invoke the shell the same way when we exec it at the end of purge, so we shouldn't have to worry too much about what exactly goes on here.

For interactive non-login shells, or non-interactive shells inherit the environment of the shell that starts them, so the above still applies.

However, I see lots of GDM and WINDOWID and XAUTHORITY stuff that the X and Gnome seem to add to the environemnt.  These might be important to preserve too.  I would guess KDE has a similar list of environment variables that need preserving.

---

starting gnome-terminal as a login shell sources your .profile a second time, PATH that is set there gets duplicates.  If my current albion profile is sourced there than the default env gets loaded twice too.

starting gnome-terminal as a non-login shell fixes that.

putting the albion function in the .profile and starting gnome-terminal as a non-login shell means I don't get the function.  Does moving it to the .bashrc fix that?

---

* Here's how it works now when you start a login shell

** sources .profile

*** sources albion_profile

**** exports ALBION_*_PATH variables

**** exports PATH_TO_ALBION variable

**** clears ALBION_CONFIGS_LOADED

**** if ALBION_ENV is not set, exports ALBION_ENV=default

*** sources .bashrc

**** sources albionrc

***** does albion env_load ALBION_ENV

****** NOTE: add purge_env(no-exec) here?

****** sources default env file

******* calls albion load config

******** adds config to ALBION_CONFIGS_LOADED

******** sources config file

********* exports environment variables, creates aliases, and so forth

* Here's what happens when you type 'albion env environment-name'

** export ALBION_ENV=environment-name

** calls purge_env NOTE: replace this with just an exec, or better, just a call to env_load?

*** unsets all environment variables except keepers (ALBION_ENV is a keeper)

*** execs $SHELL and tells it to start as a login shell

**** the above login shell startup happens

* Problems with the above:

** When you start a shell from within a shell, part of the process is repeated

*** For login shells

Your .profile is sourced again, which sources the env and the configs again, without a purge, so you get stuff added to your environment twice

*** For non-login shells

Only your .bashrc is sourced again (.profile is not sourced), which sources the env and configs again, without a purge, so you get stuff added to  your environment twice.  The difference from the above is that ALBION_CONFIGS_LOADED doesn't get cleared (that happens as a result of the .profile being sourced), so  you see the configs in there twice (which is actually more truthful than what happens when you start a login shell)

** Should there always be a purge before sourcing the env, but not always an exec?

You would only exect when 'alb env env-name' is called from the command-line.  Even then, you might want to set up an env inside a script, and there you would not want to exec either, so do an 'alb env --no-exec env-name'

so what does the new process look like?  I inserted two NOTEs above, but I'm not sure it's that simple of a change.  It's getting late and I'm not thinking clearly enough.  Just getting all this down was a big help though.


